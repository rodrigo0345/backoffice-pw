import{R as l}from"./RepositoryInterface-TDgCEybl.js";import{G as u,g as p,s as d}from"./config-Dvl3g2xv.js";class c{constructor(e){this.localStorage=window.localStorage,this.prefix="job-",this.last_id="job_last_id",this.repo=new l}create(e){return this.repo.create(e,this.localStorage,this.prefix,this.last_id)}update(e,r){return this.repo.update(e,r,this.localStorage,this.prefix)}delete(e){return this.repo.delete(e,this.localStorage,this.prefix)}find(e){return this.repo.find(e,this.localStorage,this.prefix)}all(e){return this.repo.all(e,this.localStorage,this.prefix)}}class f{constructor(e){this.localStorage=window.localStorage,this.prefix="user-",this.last_id="user_last_id",this.repo=new l}create(e){return this.repo.create(e,this.localStorage,this.prefix,this.last_id)}update(e,r){return this.repo.update(e,r,this.localStorage,this.prefix)}delete(e){return this.repo.delete(e,this.localStorage,this.prefix)}find(e){return this.repo.find(e,this.localStorage,this.prefix)}all(e){return this.repo.all(e,this.localStorage,this.prefix)}}class R{constructor(){this.userRepository=new f,this.jobsRepository=new c}createUser(e){if(e.email===""||e.password==="")throw new Error("Email and Password are required.");if(this.userRepository.find({email:e.email}))throw new Error("User already exists.");return this.userRepository.create(e)}findUser(e){return this.userRepository.find(e)}updateUser(e,r){const t=this.userRepository.find({email:r.email});if(t&&t.id!==e)throw new Error("Email already in use.");return this.userRepository.update(e,r)}deleteUser(e){return this.userRepository.delete(e)}listUsers(e){return this.userRepository.all(e)}createUserJob(e){return this.jobsRepository.create(e)}updateUserJob(e,r){return this.jobsRepository.update(e,r)}deleteUserJob(e){return this.jobsRepository.delete(e)}getAllAvailableJobs(e){return this.jobsRepository.all(e)}getUserJob(e){return this.jobsRepository.find({id:e})}addJobToUser(e,r){const t=this.userRepository.find({id:e});if(!t)throw new Error("User not found.");if(!this.jobsRepository.find({id:r}))throw new Error("Job not found.");return t.jobId=r,this.userRepository.update(e,t)}async loginWithGoogle(e,r=!0){const t=new u,a=p(),s=(await d(a,t)).user;if(!s)return null;if(!s.email)throw new Error("User email not found.");const o=this.userRepository.find({email:s.email});if(o)return o.role==="admin"&&(e.location.href="/admin"),o;if(!r)throw new Error("User not found.");const n=Math.random().toString(36).substring(7),h={id:0,email:s.email,name:s.displayName||"",role:"worker",jobId:0,isDeleted:!1,password:n,photoUrl:s.photoURL||""};return this.userRepository.create(h)}}export{c as J,R as U,f as a};
