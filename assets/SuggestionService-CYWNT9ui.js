import{S as r,I as i}from"./SuggestionRepository-CYBXsh7L.js";class n{constructor(){this.suggestionRepository=new r,this.initiativeRepository=new i}createSuggestion(e,t=!1){if(e.eventName===""||e.email===""||e.description===""||e.local===""||e.numParticipants<=0||isNaN(Number(e.numParticipants))||isNaN(Number(e.budget))||e.budget<=0)throw new Error("Event Name, Email and Description, Local, Number of Participants are required.");if(e.date.getTime()<=new Date().getTime()&&!t)throw new Error("Invalid Date");if(e.eventType!=="food_rescue"&&e.eventType!=="healthy_diets"&&e.eventType!=="food_safety"&&e.eventType!=="zero_waste")throw new Error("Event type needs to be valid");return e.createdOn=new Date,e.isApproved=!1,e.isDeleted=!1,this.suggestionRepository.create(e)}find(e){return this.suggestionRepository.find(e)}approveSuggestion(e){const t=this.suggestionRepository.find({id:e});if(!t)throw new Error("Suggestion not found.");return t.isApproved=!0,t.status="Approved",this.suggestionRepository.update(e,t)}rejectSuggestion(e){const t=this.suggestionRepository.find({id:e});if(!t)throw new Error("Suggestion not found.");return t.isApproved=!1,t.status="Rejected",this.suggestionRepository.update(e,t)}getAllSuggestions(e){return this.suggestionRepository.all(e)}}export{n as S};
