import{R as d}from"./RepositoryInterface-TDgCEybl.js";import{F as u}from"./FoodModelRepository-EukNaaBv.js";import{I as f,S as g}from"./SuggestionRepository-CYBXsh7L.js";import{J as y,a as w,G as R,g as m,s as I}from"./UserService-DC23xz9X.js";import{M as S}from"./MaterialRepository-CkyeY5IP.js";class k{constructor(t){this.repo=new d,this.localStorage=window.localStorage,this.prefix="food-list-",this.last_id="food_list_last_id"}create(t){return this.repo.create(t,this.localStorage,this.prefix,this.last_id)}update(t,e){return this.repo.update(t,e,this.localStorage,this.prefix)}delete(t){return this.repo.delete(t,this.localStorage,this.prefix)}find(t){return this.repo.find(t,this.localStorage,this.prefix)}all(t){return this.repo.all(t,this.localStorage,this.prefix)}}class v{constructor(t){this.repo=new d,this.localStorage=window.localStorage,this.prefix="media-",this.last_id="media_last_id"}create(t){return this.repo.create(t,this.localStorage,this.prefix,this.last_id)}update(t,e){return this.repo.update(t,e,this.localStorage,this.prefix)}delete(t){const e=`${this.prefix}${t}`;return this.localStorage.getItem(e)?(this.localStorage.removeItem(e),!0):!1}find(t){return this.repo.find(t,this.localStorage,this.prefix)}all(t){return this.repo.all(t,this.localStorage,this.prefix)}}class x{constructor(t){this.localStorage=window.localStorage,this.prefix="order-",this.last_id="order_last_id",this.repo=new d}checkIfAnyOrderArrived(){const t=this.all({}),e=new Date;t.forEach(i=>{i.status==="completed"||i.isDeleted===!0||i.status==="cancelled"||new Date(i.deliveryDate).getTime()<=e.getTime()&&this.update(i.id,{...i,status:"completed"})})}create(t){return this.checkIfAnyOrderArrived(),this.repo.create(t,this.localStorage,this.prefix,this.last_id)}update(t,e){return this.repo.update(t,e,this.localStorage,this.prefix)}delete(t){return this.checkIfAnyOrderArrived(),this.repo.delete(t,this.localStorage,this.prefix)}find(t){return this.checkIfAnyOrderArrived(),this.repo.find(t,this.localStorage,this.prefix)}all(t){return this.repo.all(t,this.localStorage,this.prefix)}}class _{constructor(t){this.localStorage=window.localStorage,this.prefix="participant-",this.last_id="participant_last_id",this.repo=new d}create(t){return this.repo.create(t,this.localStorage,this.prefix,this.last_id)}update(t,e){return this.repo.update(t,e,this.localStorage,this.prefix)}delete(t){return this.repo.delete(t,this.localStorage,this.prefix)}find(t){return this.repo.find(t,this.localStorage,this.prefix)}all(t){return this.repo.all(t,this.localStorage,this.prefix)}}class L{constructor(t){this.localStorage=window.localStorage,this.prefix="working_in-",this.last_id="working_in_last_id",this.repo=new d}create(t){return this.repo.create(t,this.localStorage,this.prefix,this.last_id)}update(t,e){return this.repo.update(t,e,this.localStorage,this.prefix)}delete(t){return this.repo.delete(t,this.localStorage,this.prefix)}find(t){return this.repo.find(t,this.localStorage,this.prefix)}all(t){return this.repo.all(t,this.localStorage,this.prefix)}}class j{constructor(){this.initiativeRepository=new f,this.suggestionRepository=new g,this.workingInRepository=new L,this.jobRepository=new y,this.usersRepository=new w,this.participantRepository=new _,this.orderRepository=new x,this.foodListRepository=new k,this.foodRepository=new u,this.materialsRepository=new S,this.mediaModelRepository=new v}createInitiative(t){return this.initiativeRepository.create(t)}createInitiativeFromSuggestion(t){const e=this.suggestionRepository.find({id:t.sugestionId});if(!e)throw new Error("Suggestion not found.");return e.isApproved=!0,this.suggestionRepository.update(e.id,e),t.createdOn=new Date,t.isDeleted=!1,t.sugestionId=e.id,t.eventType=e.eventType,t.local=t.local.trim()===""?e.local:t.local,t.maxParticipants=t.maxParticipants||e.numParticipants,t.minParticipants=0,t.status="pending",this.initiativeRepository.create(t)}deleteInitiative(t){return this.initiativeRepository.delete(t)}updateInitiative(t,e){return this.initiativeRepository.update(t,e)}getAllInitiatives(t){return this.orderRepository.checkIfAnyOrderArrived(),this.initiativeRepository.all(t)}addWorker(t,e){if(!this.initiativeRepository.find({id:t}))throw new Error("Initiative not found.");const r=this.usersRepository.find({id:e});if(!r)throw new Error("User not found.");if(r.jobId===0)throw new Error("User does not have a job set yet.");if(!this.jobRepository.find({id:r.jobId})||r.role!=="worker")throw new Error("User is not a worker or does not have a job set yet.");if(this.workingInRepository.find({initiativeId:t,userId:e}))throw new Error("Worker already working here.");const s={id:0,initiativeId:t,userId:e,isDeleted:!1,isPresent:!1};if(!this.workingInRepository.create(s))throw new Error("Error adding worker.");return r}removeWorker(t,e){const i=this.workingInRepository.find({initiativeId:t,userId:e});return i?this.workingInRepository.delete(i.id):!1}markPresence(t,e){const i=this.workingInRepository.find({initiativeId:t,userId:e});return i?(i.isPresent=!0,this.workingInRepository.update(i.id,i)!==null):!1}getCalculatedCost(t){if(!this.initiativeRepository.find({id:t}))throw new Error("Initiative not found.");const i=this.getStaffCost(t),o=this.orderRepository.all({initiativeId:t}).filter(s=>s.status!=="cancelled").reduce((s,n)=>s+n.price,0),a=this.getMaterialCost(t);return i+o+a}getOrders(t,e=!0){if(!this.initiativeRepository.find({id:t}))throw new Error("Initiative not found.");let r=this.orderRepository.all({initiativeId:t,isDeleted:!1});return e&&(r=r.filter(o=>o.status!=="cancelled")),r}getOrder(t,e){return this.orderRepository.find({id:t,initiativeId:e})}getFoodFromOrder(t){return this.foodListRepository.all({orderId:t}).map(i=>{const r=this.foodRepository.find({id:i.foodId});if(!r)throw new Error("Food not found.");return r})}isWorkerPresent(t,e){const i=this.workingInRepository.find({initiativeId:t,userId:e});return i?i.isPresent:!1}getAvailableFood(t){if(!this.initiativeRepository.find({id:t}))throw new Error("Initiative not found.");return this.orderRepository.all({initiativeId:t}).filter(r=>r.status==="completed").map(r=>this.foodListRepository.all({orderId:r.id})).flat().map(r=>this.foodRepository.find({id:r.foodId})).filter(r=>r!==null)}createOrder(t,e){const i=this.orderRepository.create(t);return e.forEach(r=>{this.foodListRepository.create({id:0,orderId:i.id,foodId:r.food.id,quantity:r.quantity})}),i}getRiskLevel(t){const e=this.orderRepository.all({initiativeId:t,isDeleted:!1}).filter(r=>r.status!=="cancelled");return e.reduce((r,o)=>{const a=this.foodListRepository.all({orderId:o.id}),s=a.length,n=a.reduce((p,c)=>{const h=this.foodRepository.find({id:c.foodId});return console.log({food:h}),h?p+h.risk:p},0);return console.log({foodListRisk:n,foodNumber:s,orderList:e.length}),r+n/s/e.length},0)}getNumInitiative(t){return this.initiativeRepository.all(t).length}addParticipant(t,e){const i=this.initiativeRepository.find({id:t});if(!i)throw new Error("Initiative not found.");if(this.participantRepository.find({email:e.email,initiaveId:t}))throw new Error("Participant already in the initiative.");if(this.participantRepository.all({initiaveId:t}).length>=i.maxParticipants)throw new Error("Initiative is full.");return e.initiaveId=t,this.participantRepository.create(e),!0}removeParticipant(t,e){return this.participantRepository.find({id:e,initiaveId:t})?this.participantRepository.delete(e):!1}getParticipants(t){return this.participantRepository.all({initiaveId:t})}getStaffCost(t){return this.workingInRepository.all({initiativeId:t}).reduce((r,o)=>{const a=this.usersRepository.find({id:o.userId});if(!a)return r;const s=this.jobRepository.find({id:a.jobId});return s?r+s.costPerHour:r},0)}getUsedMaterials(t){return this.materialsRepository.all({initiativeId:t})}addMaterial(t){return this.materialsRepository.create(t)}getMaterialCost(t){return this.materialsRepository.all({initiativeId:t}).reduce((i,r)=>i+r.price*r.quantity,0)}getWorkers(t){return this.workingInRepository.all({initiativeId:t}).map(i=>this.usersRepository.find({id:i.userId})).filter(i=>i!==null)}addImage(t,e){return new Promise((i,r)=>{const o=new FileReader;o.onloadend=()=>{const a=o.result,s={id:0,initiativeId:t,data:a,isDeleted:!1},n=this.mediaModelRepository.create(s);i(n)},o.readAsDataURL(e)})}getImages(t){return this.mediaModelRepository.all({initiativeId:t})}deleteImage(t){return this.mediaModelRepository.delete(t)}async loginWithGoogle(){const t=new R,e=m(),r=(await I(e,t)).user;if(!r)return null;if(!r.email)throw new Error("User email not found.");const o=this.usersRepository.find({email:r.email});if(o)return o;const a=Math.random().toString(36).substring(7),s={id:0,email:r.email,name:r.displayName||"",role:"worker",jobId:0,isDeleted:!1,password:a,photoUrl:r.photoURL||""};return this.usersRepository.create(s)}}export{k as F,j as I,x as O,L as W};
